// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.2
// source: jon_shared_cmd_lrf_align.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export interface Root {
  day?: Offsets | undefined;
  heat?: Offsets | undefined;
}

export interface Offsets {
  set?: SetOffsets | undefined;
  save?: SaveOffsets | undefined;
  reset?: ResetOffsets | undefined;
  shift?: ShiftOffsetsBy | undefined;
}

export interface SetOffsets {
  x: number;
  y: number;
}

export interface ShiftOffsetsBy {
  x: number;
  y: number;
}

export interface ResetOffsets {
}

export interface SaveOffsets {
}

function createBaseRoot(): Root {
  return { day: undefined, heat: undefined };
}

export const Root: MessageFns<Root> = {
  encode(message: Root, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.day !== undefined) {
      Offsets.encode(message.day, writer.uint32(10).fork()).join();
    }
    if (message.heat !== undefined) {
      Offsets.encode(message.heat, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Root {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.day = Offsets.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.heat = Offsets.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Root {
    return {
      day: isSet(object.day) ? Offsets.fromJSON(object.day) : undefined,
      heat: isSet(object.heat) ? Offsets.fromJSON(object.heat) : undefined,
    };
  },

  toJSON(message: Root): unknown {
    const obj: any = {};
    if (message.day !== undefined) {
      obj.day = Offsets.toJSON(message.day);
    }
    if (message.heat !== undefined) {
      obj.heat = Offsets.toJSON(message.heat);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Root>, I>>(base?: I): Root {
    return Root.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Root>, I>>(object: I): Root {
    const message = createBaseRoot();
    message.day = (object.day !== undefined && object.day !== null) ? Offsets.fromPartial(object.day) : undefined;
    message.heat = (object.heat !== undefined && object.heat !== null) ? Offsets.fromPartial(object.heat) : undefined;
    return message;
  },
};

function createBaseOffsets(): Offsets {
  return { set: undefined, save: undefined, reset: undefined, shift: undefined };
}

export const Offsets: MessageFns<Offsets> = {
  encode(message: Offsets, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.set !== undefined) {
      SetOffsets.encode(message.set, writer.uint32(10).fork()).join();
    }
    if (message.save !== undefined) {
      SaveOffsets.encode(message.save, writer.uint32(18).fork()).join();
    }
    if (message.reset !== undefined) {
      ResetOffsets.encode(message.reset, writer.uint32(26).fork()).join();
    }
    if (message.shift !== undefined) {
      ShiftOffsetsBy.encode(message.shift, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Offsets {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOffsets();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.set = SetOffsets.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.save = SaveOffsets.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.reset = ResetOffsets.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.shift = ShiftOffsetsBy.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Offsets {
    return {
      set: isSet(object.set) ? SetOffsets.fromJSON(object.set) : undefined,
      save: isSet(object.save) ? SaveOffsets.fromJSON(object.save) : undefined,
      reset: isSet(object.reset) ? ResetOffsets.fromJSON(object.reset) : undefined,
      shift: isSet(object.shift) ? ShiftOffsetsBy.fromJSON(object.shift) : undefined,
    };
  },

  toJSON(message: Offsets): unknown {
    const obj: any = {};
    if (message.set !== undefined) {
      obj.set = SetOffsets.toJSON(message.set);
    }
    if (message.save !== undefined) {
      obj.save = SaveOffsets.toJSON(message.save);
    }
    if (message.reset !== undefined) {
      obj.reset = ResetOffsets.toJSON(message.reset);
    }
    if (message.shift !== undefined) {
      obj.shift = ShiftOffsetsBy.toJSON(message.shift);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Offsets>, I>>(base?: I): Offsets {
    return Offsets.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Offsets>, I>>(object: I): Offsets {
    const message = createBaseOffsets();
    message.set = (object.set !== undefined && object.set !== null) ? SetOffsets.fromPartial(object.set) : undefined;
    message.save = (object.save !== undefined && object.save !== null)
      ? SaveOffsets.fromPartial(object.save)
      : undefined;
    message.reset = (object.reset !== undefined && object.reset !== null)
      ? ResetOffsets.fromPartial(object.reset)
      : undefined;
    message.shift = (object.shift !== undefined && object.shift !== null)
      ? ShiftOffsetsBy.fromPartial(object.shift)
      : undefined;
    return message;
  },
};

function createBaseSetOffsets(): SetOffsets {
  return { x: 0, y: 0 };
}

export const SetOffsets: MessageFns<SetOffsets> = {
  encode(message: SetOffsets, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== 0) {
      writer.uint32(8).int32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(16).int32(message.y);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetOffsets {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetOffsets();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.x = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.y = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetOffsets {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
    };
  },

  toJSON(message: SetOffsets): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = Math.round(message.x);
    }
    if (message.y !== 0) {
      obj.y = Math.round(message.y);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetOffsets>, I>>(base?: I): SetOffsets {
    return SetOffsets.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetOffsets>, I>>(object: I): SetOffsets {
    const message = createBaseSetOffsets();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseShiftOffsetsBy(): ShiftOffsetsBy {
  return { x: 0, y: 0 };
}

export const ShiftOffsetsBy: MessageFns<ShiftOffsetsBy> = {
  encode(message: ShiftOffsetsBy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== 0) {
      writer.uint32(8).int32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(16).int32(message.y);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShiftOffsetsBy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShiftOffsetsBy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.x = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.y = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShiftOffsetsBy {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
    };
  },

  toJSON(message: ShiftOffsetsBy): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = Math.round(message.x);
    }
    if (message.y !== 0) {
      obj.y = Math.round(message.y);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ShiftOffsetsBy>, I>>(base?: I): ShiftOffsetsBy {
    return ShiftOffsetsBy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ShiftOffsetsBy>, I>>(object: I): ShiftOffsetsBy {
    const message = createBaseShiftOffsetsBy();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseResetOffsets(): ResetOffsets {
  return {};
}

export const ResetOffsets: MessageFns<ResetOffsets> = {
  encode(_: ResetOffsets, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetOffsets {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetOffsets();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ResetOffsets {
    return {};
  },

  toJSON(_: ResetOffsets): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetOffsets>, I>>(base?: I): ResetOffsets {
    return ResetOffsets.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetOffsets>, I>>(_: I): ResetOffsets {
    const message = createBaseResetOffsets();
    return message;
  },
};

function createBaseSaveOffsets(): SaveOffsets {
  return {};
}

export const SaveOffsets: MessageFns<SaveOffsets> = {
  encode(_: SaveOffsets, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SaveOffsets {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSaveOffsets();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SaveOffsets {
    return {};
  },

  toJSON(_: SaveOffsets): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SaveOffsets>, I>>(base?: I): SaveOffsets {
    return SaveOffsets.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SaveOffsets>, I>>(_: I): SaveOffsets {
    const message = createBaseSaveOffsets();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
