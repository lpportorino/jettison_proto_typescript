// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.2
// source: jon_shared_data_gps.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  JonGuiDataGpsFixType,
  jonGuiDataGpsFixTypeFromJSON,
  jonGuiDataGpsFixTypeToJSON,
} from "./jon_shared_data_types";

export interface JonGuiDataGps {
  longitude: number;
  latitude: number;
  altitude: number;
  manualLongitude: number;
  manualLatitude: number;
  manualAltitude: number;
  fixType: JonGuiDataGpsFixType;
  useManual: boolean;
}

function createBaseJonGuiDataGps(): JonGuiDataGps {
  return {
    longitude: 0,
    latitude: 0,
    altitude: 0,
    manualLongitude: 0,
    manualLatitude: 0,
    manualAltitude: 0,
    fixType: 0,
    useManual: false,
  };
}

export const JonGuiDataGps: MessageFns<JonGuiDataGps> = {
  encode(message: JonGuiDataGps, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.longitude !== 0) {
      writer.uint32(9).double(message.longitude);
    }
    if (message.latitude !== 0) {
      writer.uint32(17).double(message.latitude);
    }
    if (message.altitude !== 0) {
      writer.uint32(25).double(message.altitude);
    }
    if (message.manualLongitude !== 0) {
      writer.uint32(33).double(message.manualLongitude);
    }
    if (message.manualLatitude !== 0) {
      writer.uint32(41).double(message.manualLatitude);
    }
    if (message.manualAltitude !== 0) {
      writer.uint32(49).double(message.manualAltitude);
    }
    if (message.fixType !== 0) {
      writer.uint32(56).int32(message.fixType);
    }
    if (message.useManual !== false) {
      writer.uint32(64).bool(message.useManual);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JonGuiDataGps {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJonGuiDataGps();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.longitude = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.latitude = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.altitude = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.manualLongitude = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.manualLatitude = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 49) {
            break;
          }

          message.manualAltitude = reader.double();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.fixType = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.useManual = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JonGuiDataGps {
    return {
      longitude: isSet(object.longitude) ? globalThis.Number(object.longitude) : 0,
      latitude: isSet(object.latitude) ? globalThis.Number(object.latitude) : 0,
      altitude: isSet(object.altitude) ? globalThis.Number(object.altitude) : 0,
      manualLongitude: isSet(object.manualLongitude) ? globalThis.Number(object.manualLongitude) : 0,
      manualLatitude: isSet(object.manualLatitude) ? globalThis.Number(object.manualLatitude) : 0,
      manualAltitude: isSet(object.manualAltitude) ? globalThis.Number(object.manualAltitude) : 0,
      fixType: isSet(object.fixType) ? jonGuiDataGpsFixTypeFromJSON(object.fixType) : 0,
      useManual: isSet(object.useManual) ? globalThis.Boolean(object.useManual) : false,
    };
  },

  toJSON(message: JonGuiDataGps): unknown {
    const obj: any = {};
    if (message.longitude !== 0) {
      obj.longitude = message.longitude;
    }
    if (message.latitude !== 0) {
      obj.latitude = message.latitude;
    }
    if (message.altitude !== 0) {
      obj.altitude = message.altitude;
    }
    if (message.manualLongitude !== 0) {
      obj.manualLongitude = message.manualLongitude;
    }
    if (message.manualLatitude !== 0) {
      obj.manualLatitude = message.manualLatitude;
    }
    if (message.manualAltitude !== 0) {
      obj.manualAltitude = message.manualAltitude;
    }
    if (message.fixType !== 0) {
      obj.fixType = jonGuiDataGpsFixTypeToJSON(message.fixType);
    }
    if (message.useManual !== false) {
      obj.useManual = message.useManual;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JonGuiDataGps>, I>>(base?: I): JonGuiDataGps {
    return JonGuiDataGps.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JonGuiDataGps>, I>>(object: I): JonGuiDataGps {
    const message = createBaseJonGuiDataGps();
    message.longitude = object.longitude ?? 0;
    message.latitude = object.latitude ?? 0;
    message.altitude = object.altitude ?? 0;
    message.manualLongitude = object.manualLongitude ?? 0;
    message.manualLatitude = object.manualLatitude ?? 0;
    message.manualAltitude = object.manualAltitude ?? 0;
    message.fixType = object.fixType ?? 0;
    message.useManual = object.useManual ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
