// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.2
// source: jon_shared_cmd_osd.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export interface Root {
  showDefaultScreen?: ShowDefaultScreen | undefined;
  showLrfMeasureScreen?: ShowLRFMeasureScreen | undefined;
  showLrfResultScreen?: ShowLRFResultScreen | undefined;
  showLrfResultSimplifiedScreen?: ShowLRFResultSimplifiedScreen | undefined;
  enableHeatOsd?: EnableHeatOSD | undefined;
  disableHeatOsd?: DisableHeatOSD | undefined;
  enableDayOsd?: EnableDayOSD | undefined;
  disableDayOsd?: DisableDayOSD | undefined;
}

export interface ShowDefaultScreen {
}

export interface ShowLRFMeasureScreen {
}

export interface ShowLRFResultScreen {
}

export interface ShowLRFResultSimplifiedScreen {
}

export interface EnableHeatOSD {
}

export interface DisableHeatOSD {
}

export interface EnableDayOSD {
}

export interface DisableDayOSD {
}

function createBaseRoot(): Root {
  return {
    showDefaultScreen: undefined,
    showLrfMeasureScreen: undefined,
    showLrfResultScreen: undefined,
    showLrfResultSimplifiedScreen: undefined,
    enableHeatOsd: undefined,
    disableHeatOsd: undefined,
    enableDayOsd: undefined,
    disableDayOsd: undefined,
  };
}

export const Root: MessageFns<Root> = {
  encode(message: Root, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.showDefaultScreen !== undefined) {
      ShowDefaultScreen.encode(message.showDefaultScreen, writer.uint32(10).fork()).join();
    }
    if (message.showLrfMeasureScreen !== undefined) {
      ShowLRFMeasureScreen.encode(message.showLrfMeasureScreen, writer.uint32(18).fork()).join();
    }
    if (message.showLrfResultScreen !== undefined) {
      ShowLRFResultScreen.encode(message.showLrfResultScreen, writer.uint32(26).fork()).join();
    }
    if (message.showLrfResultSimplifiedScreen !== undefined) {
      ShowLRFResultSimplifiedScreen.encode(message.showLrfResultSimplifiedScreen, writer.uint32(34).fork()).join();
    }
    if (message.enableHeatOsd !== undefined) {
      EnableHeatOSD.encode(message.enableHeatOsd, writer.uint32(42).fork()).join();
    }
    if (message.disableHeatOsd !== undefined) {
      DisableHeatOSD.encode(message.disableHeatOsd, writer.uint32(50).fork()).join();
    }
    if (message.enableDayOsd !== undefined) {
      EnableDayOSD.encode(message.enableDayOsd, writer.uint32(58).fork()).join();
    }
    if (message.disableDayOsd !== undefined) {
      DisableDayOSD.encode(message.disableDayOsd, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Root {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.showDefaultScreen = ShowDefaultScreen.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.showLrfMeasureScreen = ShowLRFMeasureScreen.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.showLrfResultScreen = ShowLRFResultScreen.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.showLrfResultSimplifiedScreen = ShowLRFResultSimplifiedScreen.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.enableHeatOsd = EnableHeatOSD.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.disableHeatOsd = DisableHeatOSD.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.enableDayOsd = EnableDayOSD.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.disableDayOsd = DisableDayOSD.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Root {
    return {
      showDefaultScreen: isSet(object.showDefaultScreen)
        ? ShowDefaultScreen.fromJSON(object.showDefaultScreen)
        : undefined,
      showLrfMeasureScreen: isSet(object.showLrfMeasureScreen)
        ? ShowLRFMeasureScreen.fromJSON(object.showLrfMeasureScreen)
        : undefined,
      showLrfResultScreen: isSet(object.showLrfResultScreen)
        ? ShowLRFResultScreen.fromJSON(object.showLrfResultScreen)
        : undefined,
      showLrfResultSimplifiedScreen: isSet(object.showLrfResultSimplifiedScreen)
        ? ShowLRFResultSimplifiedScreen.fromJSON(object.showLrfResultSimplifiedScreen)
        : undefined,
      enableHeatOsd: isSet(object.enableHeatOsd) ? EnableHeatOSD.fromJSON(object.enableHeatOsd) : undefined,
      disableHeatOsd: isSet(object.disableHeatOsd) ? DisableHeatOSD.fromJSON(object.disableHeatOsd) : undefined,
      enableDayOsd: isSet(object.enableDayOsd) ? EnableDayOSD.fromJSON(object.enableDayOsd) : undefined,
      disableDayOsd: isSet(object.disableDayOsd) ? DisableDayOSD.fromJSON(object.disableDayOsd) : undefined,
    };
  },

  toJSON(message: Root): unknown {
    const obj: any = {};
    if (message.showDefaultScreen !== undefined) {
      obj.showDefaultScreen = ShowDefaultScreen.toJSON(message.showDefaultScreen);
    }
    if (message.showLrfMeasureScreen !== undefined) {
      obj.showLrfMeasureScreen = ShowLRFMeasureScreen.toJSON(message.showLrfMeasureScreen);
    }
    if (message.showLrfResultScreen !== undefined) {
      obj.showLrfResultScreen = ShowLRFResultScreen.toJSON(message.showLrfResultScreen);
    }
    if (message.showLrfResultSimplifiedScreen !== undefined) {
      obj.showLrfResultSimplifiedScreen = ShowLRFResultSimplifiedScreen.toJSON(message.showLrfResultSimplifiedScreen);
    }
    if (message.enableHeatOsd !== undefined) {
      obj.enableHeatOsd = EnableHeatOSD.toJSON(message.enableHeatOsd);
    }
    if (message.disableHeatOsd !== undefined) {
      obj.disableHeatOsd = DisableHeatOSD.toJSON(message.disableHeatOsd);
    }
    if (message.enableDayOsd !== undefined) {
      obj.enableDayOsd = EnableDayOSD.toJSON(message.enableDayOsd);
    }
    if (message.disableDayOsd !== undefined) {
      obj.disableDayOsd = DisableDayOSD.toJSON(message.disableDayOsd);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Root>, I>>(base?: I): Root {
    return Root.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Root>, I>>(object: I): Root {
    const message = createBaseRoot();
    message.showDefaultScreen = (object.showDefaultScreen !== undefined && object.showDefaultScreen !== null)
      ? ShowDefaultScreen.fromPartial(object.showDefaultScreen)
      : undefined;
    message.showLrfMeasureScreen = (object.showLrfMeasureScreen !== undefined && object.showLrfMeasureScreen !== null)
      ? ShowLRFMeasureScreen.fromPartial(object.showLrfMeasureScreen)
      : undefined;
    message.showLrfResultScreen = (object.showLrfResultScreen !== undefined && object.showLrfResultScreen !== null)
      ? ShowLRFResultScreen.fromPartial(object.showLrfResultScreen)
      : undefined;
    message.showLrfResultSimplifiedScreen =
      (object.showLrfResultSimplifiedScreen !== undefined && object.showLrfResultSimplifiedScreen !== null)
        ? ShowLRFResultSimplifiedScreen.fromPartial(object.showLrfResultSimplifiedScreen)
        : undefined;
    message.enableHeatOsd = (object.enableHeatOsd !== undefined && object.enableHeatOsd !== null)
      ? EnableHeatOSD.fromPartial(object.enableHeatOsd)
      : undefined;
    message.disableHeatOsd = (object.disableHeatOsd !== undefined && object.disableHeatOsd !== null)
      ? DisableHeatOSD.fromPartial(object.disableHeatOsd)
      : undefined;
    message.enableDayOsd = (object.enableDayOsd !== undefined && object.enableDayOsd !== null)
      ? EnableDayOSD.fromPartial(object.enableDayOsd)
      : undefined;
    message.disableDayOsd = (object.disableDayOsd !== undefined && object.disableDayOsd !== null)
      ? DisableDayOSD.fromPartial(object.disableDayOsd)
      : undefined;
    return message;
  },
};

function createBaseShowDefaultScreen(): ShowDefaultScreen {
  return {};
}

export const ShowDefaultScreen: MessageFns<ShowDefaultScreen> = {
  encode(_: ShowDefaultScreen, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShowDefaultScreen {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShowDefaultScreen();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ShowDefaultScreen {
    return {};
  },

  toJSON(_: ShowDefaultScreen): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ShowDefaultScreen>, I>>(base?: I): ShowDefaultScreen {
    return ShowDefaultScreen.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ShowDefaultScreen>, I>>(_: I): ShowDefaultScreen {
    const message = createBaseShowDefaultScreen();
    return message;
  },
};

function createBaseShowLRFMeasureScreen(): ShowLRFMeasureScreen {
  return {};
}

export const ShowLRFMeasureScreen: MessageFns<ShowLRFMeasureScreen> = {
  encode(_: ShowLRFMeasureScreen, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShowLRFMeasureScreen {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShowLRFMeasureScreen();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ShowLRFMeasureScreen {
    return {};
  },

  toJSON(_: ShowLRFMeasureScreen): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ShowLRFMeasureScreen>, I>>(base?: I): ShowLRFMeasureScreen {
    return ShowLRFMeasureScreen.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ShowLRFMeasureScreen>, I>>(_: I): ShowLRFMeasureScreen {
    const message = createBaseShowLRFMeasureScreen();
    return message;
  },
};

function createBaseShowLRFResultScreen(): ShowLRFResultScreen {
  return {};
}

export const ShowLRFResultScreen: MessageFns<ShowLRFResultScreen> = {
  encode(_: ShowLRFResultScreen, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShowLRFResultScreen {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShowLRFResultScreen();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ShowLRFResultScreen {
    return {};
  },

  toJSON(_: ShowLRFResultScreen): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ShowLRFResultScreen>, I>>(base?: I): ShowLRFResultScreen {
    return ShowLRFResultScreen.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ShowLRFResultScreen>, I>>(_: I): ShowLRFResultScreen {
    const message = createBaseShowLRFResultScreen();
    return message;
  },
};

function createBaseShowLRFResultSimplifiedScreen(): ShowLRFResultSimplifiedScreen {
  return {};
}

export const ShowLRFResultSimplifiedScreen: MessageFns<ShowLRFResultSimplifiedScreen> = {
  encode(_: ShowLRFResultSimplifiedScreen, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShowLRFResultSimplifiedScreen {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShowLRFResultSimplifiedScreen();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ShowLRFResultSimplifiedScreen {
    return {};
  },

  toJSON(_: ShowLRFResultSimplifiedScreen): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ShowLRFResultSimplifiedScreen>, I>>(base?: I): ShowLRFResultSimplifiedScreen {
    return ShowLRFResultSimplifiedScreen.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ShowLRFResultSimplifiedScreen>, I>>(_: I): ShowLRFResultSimplifiedScreen {
    const message = createBaseShowLRFResultSimplifiedScreen();
    return message;
  },
};

function createBaseEnableHeatOSD(): EnableHeatOSD {
  return {};
}

export const EnableHeatOSD: MessageFns<EnableHeatOSD> = {
  encode(_: EnableHeatOSD, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnableHeatOSD {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnableHeatOSD();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): EnableHeatOSD {
    return {};
  },

  toJSON(_: EnableHeatOSD): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<EnableHeatOSD>, I>>(base?: I): EnableHeatOSD {
    return EnableHeatOSD.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EnableHeatOSD>, I>>(_: I): EnableHeatOSD {
    const message = createBaseEnableHeatOSD();
    return message;
  },
};

function createBaseDisableHeatOSD(): DisableHeatOSD {
  return {};
}

export const DisableHeatOSD: MessageFns<DisableHeatOSD> = {
  encode(_: DisableHeatOSD, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisableHeatOSD {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisableHeatOSD();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DisableHeatOSD {
    return {};
  },

  toJSON(_: DisableHeatOSD): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DisableHeatOSD>, I>>(base?: I): DisableHeatOSD {
    return DisableHeatOSD.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DisableHeatOSD>, I>>(_: I): DisableHeatOSD {
    const message = createBaseDisableHeatOSD();
    return message;
  },
};

function createBaseEnableDayOSD(): EnableDayOSD {
  return {};
}

export const EnableDayOSD: MessageFns<EnableDayOSD> = {
  encode(_: EnableDayOSD, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnableDayOSD {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnableDayOSD();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): EnableDayOSD {
    return {};
  },

  toJSON(_: EnableDayOSD): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<EnableDayOSD>, I>>(base?: I): EnableDayOSD {
    return EnableDayOSD.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EnableDayOSD>, I>>(_: I): EnableDayOSD {
    const message = createBaseEnableDayOSD();
    return message;
  },
};

function createBaseDisableDayOSD(): DisableDayOSD {
  return {};
}

export const DisableDayOSD: MessageFns<DisableDayOSD> = {
  encode(_: DisableDayOSD, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisableDayOSD {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisableDayOSD();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DisableDayOSD {
    return {};
  },

  toJSON(_: DisableDayOSD): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DisableDayOSD>, I>>(base?: I): DisableDayOSD {
    return DisableDayOSD.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DisableDayOSD>, I>>(_: I): DisableDayOSD {
    const message = createBaseDisableDayOSD();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
