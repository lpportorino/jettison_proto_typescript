// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.2
// source: jon_shared_cmd_lira.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export interface Root {
  refineTarget?: RefineTarget | undefined;
}

export interface RefineTarget {
  target: JonGuiDataLiraTarget | undefined;
}

export interface JonGuiDataLiraTarget {
  timestamp: Long;
  targetLongitude: number;
  targetLatitude: number;
  targetAltitude: number;
  targetAzimuth: number;
  targetElevation: number;
  distance: number;
  /** UUID as four fixed32 values (128 bits total) */
  uuidPart1: number;
  uuidPart2: number;
  uuidPart3: number;
  uuidPart4: number;
}

function createBaseRoot(): Root {
  return { refineTarget: undefined };
}

export const Root: MessageFns<Root> = {
  encode(message: Root, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.refineTarget !== undefined) {
      RefineTarget.encode(message.refineTarget, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Root {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.refineTarget = RefineTarget.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Root {
    return { refineTarget: isSet(object.refineTarget) ? RefineTarget.fromJSON(object.refineTarget) : undefined };
  },

  toJSON(message: Root): unknown {
    const obj: any = {};
    if (message.refineTarget !== undefined) {
      obj.refineTarget = RefineTarget.toJSON(message.refineTarget);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Root>, I>>(base?: I): Root {
    return Root.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Root>, I>>(object: I): Root {
    const message = createBaseRoot();
    message.refineTarget = (object.refineTarget !== undefined && object.refineTarget !== null)
      ? RefineTarget.fromPartial(object.refineTarget)
      : undefined;
    return message;
  },
};

function createBaseRefineTarget(): RefineTarget {
  return { target: undefined };
}

export const RefineTarget: MessageFns<RefineTarget> = {
  encode(message: RefineTarget, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.target !== undefined) {
      JonGuiDataLiraTarget.encode(message.target, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RefineTarget {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRefineTarget();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.target = JonGuiDataLiraTarget.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RefineTarget {
    return { target: isSet(object.target) ? JonGuiDataLiraTarget.fromJSON(object.target) : undefined };
  },

  toJSON(message: RefineTarget): unknown {
    const obj: any = {};
    if (message.target !== undefined) {
      obj.target = JonGuiDataLiraTarget.toJSON(message.target);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RefineTarget>, I>>(base?: I): RefineTarget {
    return RefineTarget.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RefineTarget>, I>>(object: I): RefineTarget {
    const message = createBaseRefineTarget();
    message.target = (object.target !== undefined && object.target !== null)
      ? JonGuiDataLiraTarget.fromPartial(object.target)
      : undefined;
    return message;
  },
};

function createBaseJonGuiDataLiraTarget(): JonGuiDataLiraTarget {
  return {
    timestamp: Long.ZERO,
    targetLongitude: 0,
    targetLatitude: 0,
    targetAltitude: 0,
    targetAzimuth: 0,
    targetElevation: 0,
    distance: 0,
    uuidPart1: 0,
    uuidPart2: 0,
    uuidPart3: 0,
    uuidPart4: 0,
  };
}

export const JonGuiDataLiraTarget: MessageFns<JonGuiDataLiraTarget> = {
  encode(message: JonGuiDataLiraTarget, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.timestamp.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.timestamp.toString());
    }
    if (message.targetLongitude !== 0) {
      writer.uint32(17).double(message.targetLongitude);
    }
    if (message.targetLatitude !== 0) {
      writer.uint32(25).double(message.targetLatitude);
    }
    if (message.targetAltitude !== 0) {
      writer.uint32(33).double(message.targetAltitude);
    }
    if (message.targetAzimuth !== 0) {
      writer.uint32(41).double(message.targetAzimuth);
    }
    if (message.targetElevation !== 0) {
      writer.uint32(49).double(message.targetElevation);
    }
    if (message.distance !== 0) {
      writer.uint32(57).double(message.distance);
    }
    if (message.uuidPart1 !== 0) {
      writer.uint32(64).int32(message.uuidPart1);
    }
    if (message.uuidPart2 !== 0) {
      writer.uint32(72).int32(message.uuidPart2);
    }
    if (message.uuidPart3 !== 0) {
      writer.uint32(80).int32(message.uuidPart3);
    }
    if (message.uuidPart4 !== 0) {
      writer.uint32(88).int32(message.uuidPart4);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JonGuiDataLiraTarget {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJonGuiDataLiraTarget();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.timestamp = Long.fromString(reader.int64().toString());
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.targetLongitude = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.targetLatitude = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.targetAltitude = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.targetAzimuth = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 49) {
            break;
          }

          message.targetElevation = reader.double();
          continue;
        }
        case 7: {
          if (tag !== 57) {
            break;
          }

          message.distance = reader.double();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.uuidPart1 = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.uuidPart2 = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.uuidPart3 = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.uuidPart4 = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JonGuiDataLiraTarget {
    return {
      timestamp: isSet(object.timestamp) ? Long.fromValue(object.timestamp) : Long.ZERO,
      targetLongitude: isSet(object.targetLongitude) ? globalThis.Number(object.targetLongitude) : 0,
      targetLatitude: isSet(object.targetLatitude) ? globalThis.Number(object.targetLatitude) : 0,
      targetAltitude: isSet(object.targetAltitude) ? globalThis.Number(object.targetAltitude) : 0,
      targetAzimuth: isSet(object.targetAzimuth) ? globalThis.Number(object.targetAzimuth) : 0,
      targetElevation: isSet(object.targetElevation) ? globalThis.Number(object.targetElevation) : 0,
      distance: isSet(object.distance) ? globalThis.Number(object.distance) : 0,
      uuidPart1: isSet(object.uuidPart1) ? globalThis.Number(object.uuidPart1) : 0,
      uuidPart2: isSet(object.uuidPart2) ? globalThis.Number(object.uuidPart2) : 0,
      uuidPart3: isSet(object.uuidPart3) ? globalThis.Number(object.uuidPart3) : 0,
      uuidPart4: isSet(object.uuidPart4) ? globalThis.Number(object.uuidPart4) : 0,
    };
  },

  toJSON(message: JonGuiDataLiraTarget): unknown {
    const obj: any = {};
    if (!message.timestamp.equals(Long.ZERO)) {
      obj.timestamp = (message.timestamp || Long.ZERO).toString();
    }
    if (message.targetLongitude !== 0) {
      obj.targetLongitude = message.targetLongitude;
    }
    if (message.targetLatitude !== 0) {
      obj.targetLatitude = message.targetLatitude;
    }
    if (message.targetAltitude !== 0) {
      obj.targetAltitude = message.targetAltitude;
    }
    if (message.targetAzimuth !== 0) {
      obj.targetAzimuth = message.targetAzimuth;
    }
    if (message.targetElevation !== 0) {
      obj.targetElevation = message.targetElevation;
    }
    if (message.distance !== 0) {
      obj.distance = message.distance;
    }
    if (message.uuidPart1 !== 0) {
      obj.uuidPart1 = Math.round(message.uuidPart1);
    }
    if (message.uuidPart2 !== 0) {
      obj.uuidPart2 = Math.round(message.uuidPart2);
    }
    if (message.uuidPart3 !== 0) {
      obj.uuidPart3 = Math.round(message.uuidPart3);
    }
    if (message.uuidPart4 !== 0) {
      obj.uuidPart4 = Math.round(message.uuidPart4);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JonGuiDataLiraTarget>, I>>(base?: I): JonGuiDataLiraTarget {
    return JonGuiDataLiraTarget.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JonGuiDataLiraTarget>, I>>(object: I): JonGuiDataLiraTarget {
    const message = createBaseJonGuiDataLiraTarget();
    message.timestamp = (object.timestamp !== undefined && object.timestamp !== null)
      ? Long.fromValue(object.timestamp)
      : Long.ZERO;
    message.targetLongitude = object.targetLongitude ?? 0;
    message.targetLatitude = object.targetLatitude ?? 0;
    message.targetAltitude = object.targetAltitude ?? 0;
    message.targetAzimuth = object.targetAzimuth ?? 0;
    message.targetElevation = object.targetElevation ?? 0;
    message.distance = object.distance ?? 0;
    message.uuidPart1 = object.uuidPart1 ?? 0;
    message.uuidPart2 = object.uuidPart2 ?? 0;
    message.uuidPart3 = object.uuidPart3 ?? 0;
    message.uuidPart4 = object.uuidPart4 ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
