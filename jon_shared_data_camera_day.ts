// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.2
// source: jon_shared_data_camera_day.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { JonGuiDataFxModeDay, jonGuiDataFxModeDayFromJSON, jonGuiDataFxModeDayToJSON } from "./jon_shared_data_types";

export interface JonGuiDataCameraDay {
  focusPos: number;
  zoomPos: number;
  irisPos: number;
  infraredFilter: boolean;
  zoomTablePos: number;
  zoomTablePosMax: number;
  fxMode: JonGuiDataFxModeDay;
  autoFocus: boolean;
  autoIris: boolean;
  digitalZoomLevel: number;
  claheLevel: number;
}

function createBaseJonGuiDataCameraDay(): JonGuiDataCameraDay {
  return {
    focusPos: 0,
    zoomPos: 0,
    irisPos: 0,
    infraredFilter: false,
    zoomTablePos: 0,
    zoomTablePosMax: 0,
    fxMode: 0,
    autoFocus: false,
    autoIris: false,
    digitalZoomLevel: 0,
    claheLevel: 0,
  };
}

export const JonGuiDataCameraDay: MessageFns<JonGuiDataCameraDay> = {
  encode(message: JonGuiDataCameraDay, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.focusPos !== 0) {
      writer.uint32(9).double(message.focusPos);
    }
    if (message.zoomPos !== 0) {
      writer.uint32(17).double(message.zoomPos);
    }
    if (message.irisPos !== 0) {
      writer.uint32(25).double(message.irisPos);
    }
    if (message.infraredFilter !== false) {
      writer.uint32(32).bool(message.infraredFilter);
    }
    if (message.zoomTablePos !== 0) {
      writer.uint32(40).int32(message.zoomTablePos);
    }
    if (message.zoomTablePosMax !== 0) {
      writer.uint32(48).int32(message.zoomTablePosMax);
    }
    if (message.fxMode !== 0) {
      writer.uint32(56).int32(message.fxMode);
    }
    if (message.autoFocus !== false) {
      writer.uint32(64).bool(message.autoFocus);
    }
    if (message.autoIris !== false) {
      writer.uint32(72).bool(message.autoIris);
    }
    if (message.digitalZoomLevel !== 0) {
      writer.uint32(81).double(message.digitalZoomLevel);
    }
    if (message.claheLevel !== 0) {
      writer.uint32(89).double(message.claheLevel);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JonGuiDataCameraDay {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJonGuiDataCameraDay();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.focusPos = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.zoomPos = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.irisPos = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.infraredFilter = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.zoomTablePos = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.zoomTablePosMax = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.fxMode = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.autoFocus = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.autoIris = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 81) {
            break;
          }

          message.digitalZoomLevel = reader.double();
          continue;
        }
        case 11: {
          if (tag !== 89) {
            break;
          }

          message.claheLevel = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JonGuiDataCameraDay {
    return {
      focusPos: isSet(object.focusPos) ? globalThis.Number(object.focusPos) : 0,
      zoomPos: isSet(object.zoomPos) ? globalThis.Number(object.zoomPos) : 0,
      irisPos: isSet(object.irisPos) ? globalThis.Number(object.irisPos) : 0,
      infraredFilter: isSet(object.infraredFilter) ? globalThis.Boolean(object.infraredFilter) : false,
      zoomTablePos: isSet(object.zoomTablePos) ? globalThis.Number(object.zoomTablePos) : 0,
      zoomTablePosMax: isSet(object.zoomTablePosMax) ? globalThis.Number(object.zoomTablePosMax) : 0,
      fxMode: isSet(object.fxMode) ? jonGuiDataFxModeDayFromJSON(object.fxMode) : 0,
      autoFocus: isSet(object.autoFocus) ? globalThis.Boolean(object.autoFocus) : false,
      autoIris: isSet(object.autoIris) ? globalThis.Boolean(object.autoIris) : false,
      digitalZoomLevel: isSet(object.digitalZoomLevel) ? globalThis.Number(object.digitalZoomLevel) : 0,
      claheLevel: isSet(object.claheLevel) ? globalThis.Number(object.claheLevel) : 0,
    };
  },

  toJSON(message: JonGuiDataCameraDay): unknown {
    const obj: any = {};
    if (message.focusPos !== 0) {
      obj.focusPos = message.focusPos;
    }
    if (message.zoomPos !== 0) {
      obj.zoomPos = message.zoomPos;
    }
    if (message.irisPos !== 0) {
      obj.irisPos = message.irisPos;
    }
    if (message.infraredFilter !== false) {
      obj.infraredFilter = message.infraredFilter;
    }
    if (message.zoomTablePos !== 0) {
      obj.zoomTablePos = Math.round(message.zoomTablePos);
    }
    if (message.zoomTablePosMax !== 0) {
      obj.zoomTablePosMax = Math.round(message.zoomTablePosMax);
    }
    if (message.fxMode !== 0) {
      obj.fxMode = jonGuiDataFxModeDayToJSON(message.fxMode);
    }
    if (message.autoFocus !== false) {
      obj.autoFocus = message.autoFocus;
    }
    if (message.autoIris !== false) {
      obj.autoIris = message.autoIris;
    }
    if (message.digitalZoomLevel !== 0) {
      obj.digitalZoomLevel = message.digitalZoomLevel;
    }
    if (message.claheLevel !== 0) {
      obj.claheLevel = message.claheLevel;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JonGuiDataCameraDay>, I>>(base?: I): JonGuiDataCameraDay {
    return JonGuiDataCameraDay.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JonGuiDataCameraDay>, I>>(object: I): JonGuiDataCameraDay {
    const message = createBaseJonGuiDataCameraDay();
    message.focusPos = object.focusPos ?? 0;
    message.zoomPos = object.zoomPos ?? 0;
    message.irisPos = object.irisPos ?? 0;
    message.infraredFilter = object.infraredFilter ?? false;
    message.zoomTablePos = object.zoomTablePos ?? 0;
    message.zoomTablePosMax = object.zoomTablePosMax ?? 0;
    message.fxMode = object.fxMode ?? 0;
    message.autoFocus = object.autoFocus ?? false;
    message.autoIris = object.autoIris ?? false;
    message.digitalZoomLevel = object.digitalZoomLevel ?? 0;
    message.claheLevel = object.claheLevel ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
