// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.2
// source: jon_shared_data_time.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export interface JonGuiDataTime {
  timestamp: Long;
  manualTimestamp: Long;
  zoneId: number;
  useManualTime: boolean;
}

function createBaseJonGuiDataTime(): JonGuiDataTime {
  return { timestamp: Long.ZERO, manualTimestamp: Long.ZERO, zoneId: 0, useManualTime: false };
}

export const JonGuiDataTime: MessageFns<JonGuiDataTime> = {
  encode(message: JonGuiDataTime, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.timestamp.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.timestamp.toString());
    }
    if (!message.manualTimestamp.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.manualTimestamp.toString());
    }
    if (message.zoneId !== 0) {
      writer.uint32(24).int32(message.zoneId);
    }
    if (message.useManualTime !== false) {
      writer.uint32(32).bool(message.useManualTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JonGuiDataTime {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJonGuiDataTime();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.timestamp = Long.fromString(reader.int64().toString());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.manualTimestamp = Long.fromString(reader.int64().toString());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.zoneId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.useManualTime = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JonGuiDataTime {
    return {
      timestamp: isSet(object.timestamp) ? Long.fromValue(object.timestamp) : Long.ZERO,
      manualTimestamp: isSet(object.manualTimestamp) ? Long.fromValue(object.manualTimestamp) : Long.ZERO,
      zoneId: isSet(object.zoneId) ? globalThis.Number(object.zoneId) : 0,
      useManualTime: isSet(object.useManualTime) ? globalThis.Boolean(object.useManualTime) : false,
    };
  },

  toJSON(message: JonGuiDataTime): unknown {
    const obj: any = {};
    if (!message.timestamp.equals(Long.ZERO)) {
      obj.timestamp = (message.timestamp || Long.ZERO).toString();
    }
    if (!message.manualTimestamp.equals(Long.ZERO)) {
      obj.manualTimestamp = (message.manualTimestamp || Long.ZERO).toString();
    }
    if (message.zoneId !== 0) {
      obj.zoneId = Math.round(message.zoneId);
    }
    if (message.useManualTime !== false) {
      obj.useManualTime = message.useManualTime;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JonGuiDataTime>, I>>(base?: I): JonGuiDataTime {
    return JonGuiDataTime.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JonGuiDataTime>, I>>(object: I): JonGuiDataTime {
    const message = createBaseJonGuiDataTime();
    message.timestamp = (object.timestamp !== undefined && object.timestamp !== null)
      ? Long.fromValue(object.timestamp)
      : Long.ZERO;
    message.manualTimestamp = (object.manualTimestamp !== undefined && object.manualTimestamp !== null)
      ? Long.fromValue(object.manualTimestamp)
      : Long.ZERO;
    message.zoneId = object.zoneId ?? 0;
    message.useManualTime = object.useManualTime ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
