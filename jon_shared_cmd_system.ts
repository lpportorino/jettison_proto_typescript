// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.2
// source: jon_shared_cmd_system.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  JonGuiDataSystemLocalizations,
  jonGuiDataSystemLocalizationsFromJSON,
  jonGuiDataSystemLocalizationsToJSON,
} from "./jon_shared_data_types";

export interface Root {
  startAll?: StartALl | undefined;
  stopAll?: StopALl | undefined;
  reboot?: Reboot | undefined;
  powerOff?: PowerOff | undefined;
  localization?: SetLocalization | undefined;
  resetConfigs?: ResetConfigs | undefined;
  startRec?: StartRec | undefined;
  stopRec?: StopRec | undefined;
  markRecImportant?: MarkRecImportant | undefined;
  unmarkRecImportant?: UnmarkRecImportant | undefined;
  enterTransport?: EnterTransport | undefined;
  geodesicModeEnable?: EnableGeodesicMode | undefined;
  geodesicModeDisable?: DisableGeodesicMode | undefined;
}

export interface StartALl {
}

export interface StopALl {
}

export interface Reboot {
}

export interface PowerOff {
}

export interface ResetConfigs {
}

export interface StartRec {
}

export interface StopRec {
}

export interface MarkRecImportant {
}

export interface UnmarkRecImportant {
}

export interface EnterTransport {
}

export interface EnableGeodesicMode {
}

export interface DisableGeodesicMode {
}

export interface SetLocalization {
  loc: JonGuiDataSystemLocalizations;
}

function createBaseRoot(): Root {
  return {
    startAll: undefined,
    stopAll: undefined,
    reboot: undefined,
    powerOff: undefined,
    localization: undefined,
    resetConfigs: undefined,
    startRec: undefined,
    stopRec: undefined,
    markRecImportant: undefined,
    unmarkRecImportant: undefined,
    enterTransport: undefined,
    geodesicModeEnable: undefined,
    geodesicModeDisable: undefined,
  };
}

export const Root: MessageFns<Root> = {
  encode(message: Root, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startAll !== undefined) {
      StartALl.encode(message.startAll, writer.uint32(10).fork()).join();
    }
    if (message.stopAll !== undefined) {
      StopALl.encode(message.stopAll, writer.uint32(18).fork()).join();
    }
    if (message.reboot !== undefined) {
      Reboot.encode(message.reboot, writer.uint32(26).fork()).join();
    }
    if (message.powerOff !== undefined) {
      PowerOff.encode(message.powerOff, writer.uint32(34).fork()).join();
    }
    if (message.localization !== undefined) {
      SetLocalization.encode(message.localization, writer.uint32(42).fork()).join();
    }
    if (message.resetConfigs !== undefined) {
      ResetConfigs.encode(message.resetConfigs, writer.uint32(50).fork()).join();
    }
    if (message.startRec !== undefined) {
      StartRec.encode(message.startRec, writer.uint32(58).fork()).join();
    }
    if (message.stopRec !== undefined) {
      StopRec.encode(message.stopRec, writer.uint32(66).fork()).join();
    }
    if (message.markRecImportant !== undefined) {
      MarkRecImportant.encode(message.markRecImportant, writer.uint32(74).fork()).join();
    }
    if (message.unmarkRecImportant !== undefined) {
      UnmarkRecImportant.encode(message.unmarkRecImportant, writer.uint32(82).fork()).join();
    }
    if (message.enterTransport !== undefined) {
      EnterTransport.encode(message.enterTransport, writer.uint32(90).fork()).join();
    }
    if (message.geodesicModeEnable !== undefined) {
      EnableGeodesicMode.encode(message.geodesicModeEnable, writer.uint32(98).fork()).join();
    }
    if (message.geodesicModeDisable !== undefined) {
      DisableGeodesicMode.encode(message.geodesicModeDisable, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Root {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.startAll = StartALl.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stopAll = StopALl.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.reboot = Reboot.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.powerOff = PowerOff.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.localization = SetLocalization.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.resetConfigs = ResetConfigs.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.startRec = StartRec.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.stopRec = StopRec.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.markRecImportant = MarkRecImportant.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.unmarkRecImportant = UnmarkRecImportant.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.enterTransport = EnterTransport.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.geodesicModeEnable = EnableGeodesicMode.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.geodesicModeDisable = DisableGeodesicMode.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Root {
    return {
      startAll: isSet(object.startAll) ? StartALl.fromJSON(object.startAll) : undefined,
      stopAll: isSet(object.stopAll) ? StopALl.fromJSON(object.stopAll) : undefined,
      reboot: isSet(object.reboot) ? Reboot.fromJSON(object.reboot) : undefined,
      powerOff: isSet(object.powerOff) ? PowerOff.fromJSON(object.powerOff) : undefined,
      localization: isSet(object.localization) ? SetLocalization.fromJSON(object.localization) : undefined,
      resetConfigs: isSet(object.resetConfigs) ? ResetConfigs.fromJSON(object.resetConfigs) : undefined,
      startRec: isSet(object.startRec) ? StartRec.fromJSON(object.startRec) : undefined,
      stopRec: isSet(object.stopRec) ? StopRec.fromJSON(object.stopRec) : undefined,
      markRecImportant: isSet(object.markRecImportant) ? MarkRecImportant.fromJSON(object.markRecImportant) : undefined,
      unmarkRecImportant: isSet(object.unmarkRecImportant)
        ? UnmarkRecImportant.fromJSON(object.unmarkRecImportant)
        : undefined,
      enterTransport: isSet(object.enterTransport) ? EnterTransport.fromJSON(object.enterTransport) : undefined,
      geodesicModeEnable: isSet(object.geodesicModeEnable)
        ? EnableGeodesicMode.fromJSON(object.geodesicModeEnable)
        : undefined,
      geodesicModeDisable: isSet(object.geodesicModeDisable)
        ? DisableGeodesicMode.fromJSON(object.geodesicModeDisable)
        : undefined,
    };
  },

  toJSON(message: Root): unknown {
    const obj: any = {};
    if (message.startAll !== undefined) {
      obj.startAll = StartALl.toJSON(message.startAll);
    }
    if (message.stopAll !== undefined) {
      obj.stopAll = StopALl.toJSON(message.stopAll);
    }
    if (message.reboot !== undefined) {
      obj.reboot = Reboot.toJSON(message.reboot);
    }
    if (message.powerOff !== undefined) {
      obj.powerOff = PowerOff.toJSON(message.powerOff);
    }
    if (message.localization !== undefined) {
      obj.localization = SetLocalization.toJSON(message.localization);
    }
    if (message.resetConfigs !== undefined) {
      obj.resetConfigs = ResetConfigs.toJSON(message.resetConfigs);
    }
    if (message.startRec !== undefined) {
      obj.startRec = StartRec.toJSON(message.startRec);
    }
    if (message.stopRec !== undefined) {
      obj.stopRec = StopRec.toJSON(message.stopRec);
    }
    if (message.markRecImportant !== undefined) {
      obj.markRecImportant = MarkRecImportant.toJSON(message.markRecImportant);
    }
    if (message.unmarkRecImportant !== undefined) {
      obj.unmarkRecImportant = UnmarkRecImportant.toJSON(message.unmarkRecImportant);
    }
    if (message.enterTransport !== undefined) {
      obj.enterTransport = EnterTransport.toJSON(message.enterTransport);
    }
    if (message.geodesicModeEnable !== undefined) {
      obj.geodesicModeEnable = EnableGeodesicMode.toJSON(message.geodesicModeEnable);
    }
    if (message.geodesicModeDisable !== undefined) {
      obj.geodesicModeDisable = DisableGeodesicMode.toJSON(message.geodesicModeDisable);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Root>, I>>(base?: I): Root {
    return Root.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Root>, I>>(object: I): Root {
    const message = createBaseRoot();
    message.startAll = (object.startAll !== undefined && object.startAll !== null)
      ? StartALl.fromPartial(object.startAll)
      : undefined;
    message.stopAll = (object.stopAll !== undefined && object.stopAll !== null)
      ? StopALl.fromPartial(object.stopAll)
      : undefined;
    message.reboot = (object.reboot !== undefined && object.reboot !== null)
      ? Reboot.fromPartial(object.reboot)
      : undefined;
    message.powerOff = (object.powerOff !== undefined && object.powerOff !== null)
      ? PowerOff.fromPartial(object.powerOff)
      : undefined;
    message.localization = (object.localization !== undefined && object.localization !== null)
      ? SetLocalization.fromPartial(object.localization)
      : undefined;
    message.resetConfigs = (object.resetConfigs !== undefined && object.resetConfigs !== null)
      ? ResetConfigs.fromPartial(object.resetConfigs)
      : undefined;
    message.startRec = (object.startRec !== undefined && object.startRec !== null)
      ? StartRec.fromPartial(object.startRec)
      : undefined;
    message.stopRec = (object.stopRec !== undefined && object.stopRec !== null)
      ? StopRec.fromPartial(object.stopRec)
      : undefined;
    message.markRecImportant = (object.markRecImportant !== undefined && object.markRecImportant !== null)
      ? MarkRecImportant.fromPartial(object.markRecImportant)
      : undefined;
    message.unmarkRecImportant = (object.unmarkRecImportant !== undefined && object.unmarkRecImportant !== null)
      ? UnmarkRecImportant.fromPartial(object.unmarkRecImportant)
      : undefined;
    message.enterTransport = (object.enterTransport !== undefined && object.enterTransport !== null)
      ? EnterTransport.fromPartial(object.enterTransport)
      : undefined;
    message.geodesicModeEnable = (object.geodesicModeEnable !== undefined && object.geodesicModeEnable !== null)
      ? EnableGeodesicMode.fromPartial(object.geodesicModeEnable)
      : undefined;
    message.geodesicModeDisable = (object.geodesicModeDisable !== undefined && object.geodesicModeDisable !== null)
      ? DisableGeodesicMode.fromPartial(object.geodesicModeDisable)
      : undefined;
    return message;
  },
};

function createBaseStartALl(): StartALl {
  return {};
}

export const StartALl: MessageFns<StartALl> = {
  encode(_: StartALl, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartALl {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartALl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): StartALl {
    return {};
  },

  toJSON(_: StartALl): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<StartALl>, I>>(base?: I): StartALl {
    return StartALl.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StartALl>, I>>(_: I): StartALl {
    const message = createBaseStartALl();
    return message;
  },
};

function createBaseStopALl(): StopALl {
  return {};
}

export const StopALl: MessageFns<StopALl> = {
  encode(_: StopALl, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StopALl {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopALl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): StopALl {
    return {};
  },

  toJSON(_: StopALl): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<StopALl>, I>>(base?: I): StopALl {
    return StopALl.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StopALl>, I>>(_: I): StopALl {
    const message = createBaseStopALl();
    return message;
  },
};

function createBaseReboot(): Reboot {
  return {};
}

export const Reboot: MessageFns<Reboot> = {
  encode(_: Reboot, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Reboot {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReboot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Reboot {
    return {};
  },

  toJSON(_: Reboot): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Reboot>, I>>(base?: I): Reboot {
    return Reboot.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Reboot>, I>>(_: I): Reboot {
    const message = createBaseReboot();
    return message;
  },
};

function createBasePowerOff(): PowerOff {
  return {};
}

export const PowerOff: MessageFns<PowerOff> = {
  encode(_: PowerOff, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PowerOff {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePowerOff();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PowerOff {
    return {};
  },

  toJSON(_: PowerOff): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<PowerOff>, I>>(base?: I): PowerOff {
    return PowerOff.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PowerOff>, I>>(_: I): PowerOff {
    const message = createBasePowerOff();
    return message;
  },
};

function createBaseResetConfigs(): ResetConfigs {
  return {};
}

export const ResetConfigs: MessageFns<ResetConfigs> = {
  encode(_: ResetConfigs, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetConfigs {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetConfigs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ResetConfigs {
    return {};
  },

  toJSON(_: ResetConfigs): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetConfigs>, I>>(base?: I): ResetConfigs {
    return ResetConfigs.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetConfigs>, I>>(_: I): ResetConfigs {
    const message = createBaseResetConfigs();
    return message;
  },
};

function createBaseStartRec(): StartRec {
  return {};
}

export const StartRec: MessageFns<StartRec> = {
  encode(_: StartRec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartRec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartRec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): StartRec {
    return {};
  },

  toJSON(_: StartRec): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<StartRec>, I>>(base?: I): StartRec {
    return StartRec.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StartRec>, I>>(_: I): StartRec {
    const message = createBaseStartRec();
    return message;
  },
};

function createBaseStopRec(): StopRec {
  return {};
}

export const StopRec: MessageFns<StopRec> = {
  encode(_: StopRec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StopRec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopRec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): StopRec {
    return {};
  },

  toJSON(_: StopRec): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<StopRec>, I>>(base?: I): StopRec {
    return StopRec.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StopRec>, I>>(_: I): StopRec {
    const message = createBaseStopRec();
    return message;
  },
};

function createBaseMarkRecImportant(): MarkRecImportant {
  return {};
}

export const MarkRecImportant: MessageFns<MarkRecImportant> = {
  encode(_: MarkRecImportant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarkRecImportant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarkRecImportant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MarkRecImportant {
    return {};
  },

  toJSON(_: MarkRecImportant): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MarkRecImportant>, I>>(base?: I): MarkRecImportant {
    return MarkRecImportant.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MarkRecImportant>, I>>(_: I): MarkRecImportant {
    const message = createBaseMarkRecImportant();
    return message;
  },
};

function createBaseUnmarkRecImportant(): UnmarkRecImportant {
  return {};
}

export const UnmarkRecImportant: MessageFns<UnmarkRecImportant> = {
  encode(_: UnmarkRecImportant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnmarkRecImportant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnmarkRecImportant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UnmarkRecImportant {
    return {};
  },

  toJSON(_: UnmarkRecImportant): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<UnmarkRecImportant>, I>>(base?: I): UnmarkRecImportant {
    return UnmarkRecImportant.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnmarkRecImportant>, I>>(_: I): UnmarkRecImportant {
    const message = createBaseUnmarkRecImportant();
    return message;
  },
};

function createBaseEnterTransport(): EnterTransport {
  return {};
}

export const EnterTransport: MessageFns<EnterTransport> = {
  encode(_: EnterTransport, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnterTransport {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnterTransport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): EnterTransport {
    return {};
  },

  toJSON(_: EnterTransport): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<EnterTransport>, I>>(base?: I): EnterTransport {
    return EnterTransport.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EnterTransport>, I>>(_: I): EnterTransport {
    const message = createBaseEnterTransport();
    return message;
  },
};

function createBaseEnableGeodesicMode(): EnableGeodesicMode {
  return {};
}

export const EnableGeodesicMode: MessageFns<EnableGeodesicMode> = {
  encode(_: EnableGeodesicMode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnableGeodesicMode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnableGeodesicMode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): EnableGeodesicMode {
    return {};
  },

  toJSON(_: EnableGeodesicMode): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<EnableGeodesicMode>, I>>(base?: I): EnableGeodesicMode {
    return EnableGeodesicMode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EnableGeodesicMode>, I>>(_: I): EnableGeodesicMode {
    const message = createBaseEnableGeodesicMode();
    return message;
  },
};

function createBaseDisableGeodesicMode(): DisableGeodesicMode {
  return {};
}

export const DisableGeodesicMode: MessageFns<DisableGeodesicMode> = {
  encode(_: DisableGeodesicMode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisableGeodesicMode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisableGeodesicMode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DisableGeodesicMode {
    return {};
  },

  toJSON(_: DisableGeodesicMode): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DisableGeodesicMode>, I>>(base?: I): DisableGeodesicMode {
    return DisableGeodesicMode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DisableGeodesicMode>, I>>(_: I): DisableGeodesicMode {
    const message = createBaseDisableGeodesicMode();
    return message;
  },
};

function createBaseSetLocalization(): SetLocalization {
  return { loc: 0 };
}

export const SetLocalization: MessageFns<SetLocalization> = {
  encode(message: SetLocalization, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.loc !== 0) {
      writer.uint32(8).int32(message.loc);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetLocalization {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetLocalization();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.loc = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetLocalization {
    return { loc: isSet(object.loc) ? jonGuiDataSystemLocalizationsFromJSON(object.loc) : 0 };
  },

  toJSON(message: SetLocalization): unknown {
    const obj: any = {};
    if (message.loc !== 0) {
      obj.loc = jonGuiDataSystemLocalizationsToJSON(message.loc);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetLocalization>, I>>(base?: I): SetLocalization {
    return SetLocalization.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetLocalization>, I>>(object: I): SetLocalization {
    const message = createBaseSetLocalization();
    message.loc = object.loc ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
