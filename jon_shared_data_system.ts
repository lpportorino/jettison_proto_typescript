// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.2
// source: jon_shared_data_system.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  JonGuiDataSystemLocalizations,
  jonGuiDataSystemLocalizationsFromJSON,
  jonGuiDataSystemLocalizationsToJSON,
} from "./jon_shared_data_types";

export interface JonGuiDataSystem {
  cpuTemperature: number;
  gpuTemperature: number;
  gpuLoad: number;
  cpuLoad: number;
  powerConsumption: number;
  loc: JonGuiDataSystemLocalizations;
  curVideoRecDirYear: number;
  curVideoRecDirMonth: number;
  curVideoRecDirDay: number;
  curVideoRecDirHour: number;
  curVideoRecDirMinute: number;
  curVideoRecDirSecond: number;
  recEnabled: boolean;
  importantRecEnabled: boolean;
  lowDiskSpace: boolean;
  noDiskSpace: boolean;
  diskSpace: number;
  tracking: boolean;
  vampireMode: boolean;
  stabilizationMode: boolean;
  geodesicMode: boolean;
  cvDumping: boolean;
  recognitionMode: boolean;
}

function createBaseJonGuiDataSystem(): JonGuiDataSystem {
  return {
    cpuTemperature: 0,
    gpuTemperature: 0,
    gpuLoad: 0,
    cpuLoad: 0,
    powerConsumption: 0,
    loc: 0,
    curVideoRecDirYear: 0,
    curVideoRecDirMonth: 0,
    curVideoRecDirDay: 0,
    curVideoRecDirHour: 0,
    curVideoRecDirMinute: 0,
    curVideoRecDirSecond: 0,
    recEnabled: false,
    importantRecEnabled: false,
    lowDiskSpace: false,
    noDiskSpace: false,
    diskSpace: 0,
    tracking: false,
    vampireMode: false,
    stabilizationMode: false,
    geodesicMode: false,
    cvDumping: false,
    recognitionMode: false,
  };
}

export const JonGuiDataSystem: MessageFns<JonGuiDataSystem> = {
  encode(message: JonGuiDataSystem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cpuTemperature !== 0) {
      writer.uint32(9).double(message.cpuTemperature);
    }
    if (message.gpuTemperature !== 0) {
      writer.uint32(17).double(message.gpuTemperature);
    }
    if (message.gpuLoad !== 0) {
      writer.uint32(25).double(message.gpuLoad);
    }
    if (message.cpuLoad !== 0) {
      writer.uint32(33).double(message.cpuLoad);
    }
    if (message.powerConsumption !== 0) {
      writer.uint32(41).double(message.powerConsumption);
    }
    if (message.loc !== 0) {
      writer.uint32(48).int32(message.loc);
    }
    if (message.curVideoRecDirYear !== 0) {
      writer.uint32(56).int32(message.curVideoRecDirYear);
    }
    if (message.curVideoRecDirMonth !== 0) {
      writer.uint32(64).int32(message.curVideoRecDirMonth);
    }
    if (message.curVideoRecDirDay !== 0) {
      writer.uint32(72).int32(message.curVideoRecDirDay);
    }
    if (message.curVideoRecDirHour !== 0) {
      writer.uint32(80).int32(message.curVideoRecDirHour);
    }
    if (message.curVideoRecDirMinute !== 0) {
      writer.uint32(88).int32(message.curVideoRecDirMinute);
    }
    if (message.curVideoRecDirSecond !== 0) {
      writer.uint32(96).int32(message.curVideoRecDirSecond);
    }
    if (message.recEnabled !== false) {
      writer.uint32(104).bool(message.recEnabled);
    }
    if (message.importantRecEnabled !== false) {
      writer.uint32(112).bool(message.importantRecEnabled);
    }
    if (message.lowDiskSpace !== false) {
      writer.uint32(120).bool(message.lowDiskSpace);
    }
    if (message.noDiskSpace !== false) {
      writer.uint32(128).bool(message.noDiskSpace);
    }
    if (message.diskSpace !== 0) {
      writer.uint32(136).int32(message.diskSpace);
    }
    if (message.tracking !== false) {
      writer.uint32(144).bool(message.tracking);
    }
    if (message.vampireMode !== false) {
      writer.uint32(152).bool(message.vampireMode);
    }
    if (message.stabilizationMode !== false) {
      writer.uint32(160).bool(message.stabilizationMode);
    }
    if (message.geodesicMode !== false) {
      writer.uint32(168).bool(message.geodesicMode);
    }
    if (message.cvDumping !== false) {
      writer.uint32(176).bool(message.cvDumping);
    }
    if (message.recognitionMode !== false) {
      writer.uint32(184).bool(message.recognitionMode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JonGuiDataSystem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJonGuiDataSystem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.cpuTemperature = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.gpuTemperature = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.gpuLoad = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.cpuLoad = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.powerConsumption = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.loc = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.curVideoRecDirYear = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.curVideoRecDirMonth = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.curVideoRecDirDay = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.curVideoRecDirHour = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.curVideoRecDirMinute = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.curVideoRecDirSecond = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.recEnabled = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.importantRecEnabled = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.lowDiskSpace = reader.bool();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.noDiskSpace = reader.bool();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.diskSpace = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.tracking = reader.bool();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.vampireMode = reader.bool();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.stabilizationMode = reader.bool();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.geodesicMode = reader.bool();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.cvDumping = reader.bool();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.recognitionMode = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JonGuiDataSystem {
    return {
      cpuTemperature: isSet(object.cpuTemperature) ? globalThis.Number(object.cpuTemperature) : 0,
      gpuTemperature: isSet(object.gpuTemperature) ? globalThis.Number(object.gpuTemperature) : 0,
      gpuLoad: isSet(object.gpuLoad) ? globalThis.Number(object.gpuLoad) : 0,
      cpuLoad: isSet(object.cpuLoad) ? globalThis.Number(object.cpuLoad) : 0,
      powerConsumption: isSet(object.powerConsumption) ? globalThis.Number(object.powerConsumption) : 0,
      loc: isSet(object.loc) ? jonGuiDataSystemLocalizationsFromJSON(object.loc) : 0,
      curVideoRecDirYear: isSet(object.curVideoRecDirYear) ? globalThis.Number(object.curVideoRecDirYear) : 0,
      curVideoRecDirMonth: isSet(object.curVideoRecDirMonth) ? globalThis.Number(object.curVideoRecDirMonth) : 0,
      curVideoRecDirDay: isSet(object.curVideoRecDirDay) ? globalThis.Number(object.curVideoRecDirDay) : 0,
      curVideoRecDirHour: isSet(object.curVideoRecDirHour) ? globalThis.Number(object.curVideoRecDirHour) : 0,
      curVideoRecDirMinute: isSet(object.curVideoRecDirMinute) ? globalThis.Number(object.curVideoRecDirMinute) : 0,
      curVideoRecDirSecond: isSet(object.curVideoRecDirSecond) ? globalThis.Number(object.curVideoRecDirSecond) : 0,
      recEnabled: isSet(object.recEnabled) ? globalThis.Boolean(object.recEnabled) : false,
      importantRecEnabled: isSet(object.importantRecEnabled) ? globalThis.Boolean(object.importantRecEnabled) : false,
      lowDiskSpace: isSet(object.lowDiskSpace) ? globalThis.Boolean(object.lowDiskSpace) : false,
      noDiskSpace: isSet(object.noDiskSpace) ? globalThis.Boolean(object.noDiskSpace) : false,
      diskSpace: isSet(object.diskSpace) ? globalThis.Number(object.diskSpace) : 0,
      tracking: isSet(object.tracking) ? globalThis.Boolean(object.tracking) : false,
      vampireMode: isSet(object.vampireMode) ? globalThis.Boolean(object.vampireMode) : false,
      stabilizationMode: isSet(object.stabilizationMode) ? globalThis.Boolean(object.stabilizationMode) : false,
      geodesicMode: isSet(object.geodesicMode) ? globalThis.Boolean(object.geodesicMode) : false,
      cvDumping: isSet(object.cvDumping) ? globalThis.Boolean(object.cvDumping) : false,
      recognitionMode: isSet(object.recognitionMode) ? globalThis.Boolean(object.recognitionMode) : false,
    };
  },

  toJSON(message: JonGuiDataSystem): unknown {
    const obj: any = {};
    if (message.cpuTemperature !== 0) {
      obj.cpuTemperature = message.cpuTemperature;
    }
    if (message.gpuTemperature !== 0) {
      obj.gpuTemperature = message.gpuTemperature;
    }
    if (message.gpuLoad !== 0) {
      obj.gpuLoad = message.gpuLoad;
    }
    if (message.cpuLoad !== 0) {
      obj.cpuLoad = message.cpuLoad;
    }
    if (message.powerConsumption !== 0) {
      obj.powerConsumption = message.powerConsumption;
    }
    if (message.loc !== 0) {
      obj.loc = jonGuiDataSystemLocalizationsToJSON(message.loc);
    }
    if (message.curVideoRecDirYear !== 0) {
      obj.curVideoRecDirYear = Math.round(message.curVideoRecDirYear);
    }
    if (message.curVideoRecDirMonth !== 0) {
      obj.curVideoRecDirMonth = Math.round(message.curVideoRecDirMonth);
    }
    if (message.curVideoRecDirDay !== 0) {
      obj.curVideoRecDirDay = Math.round(message.curVideoRecDirDay);
    }
    if (message.curVideoRecDirHour !== 0) {
      obj.curVideoRecDirHour = Math.round(message.curVideoRecDirHour);
    }
    if (message.curVideoRecDirMinute !== 0) {
      obj.curVideoRecDirMinute = Math.round(message.curVideoRecDirMinute);
    }
    if (message.curVideoRecDirSecond !== 0) {
      obj.curVideoRecDirSecond = Math.round(message.curVideoRecDirSecond);
    }
    if (message.recEnabled !== false) {
      obj.recEnabled = message.recEnabled;
    }
    if (message.importantRecEnabled !== false) {
      obj.importantRecEnabled = message.importantRecEnabled;
    }
    if (message.lowDiskSpace !== false) {
      obj.lowDiskSpace = message.lowDiskSpace;
    }
    if (message.noDiskSpace !== false) {
      obj.noDiskSpace = message.noDiskSpace;
    }
    if (message.diskSpace !== 0) {
      obj.diskSpace = Math.round(message.diskSpace);
    }
    if (message.tracking !== false) {
      obj.tracking = message.tracking;
    }
    if (message.vampireMode !== false) {
      obj.vampireMode = message.vampireMode;
    }
    if (message.stabilizationMode !== false) {
      obj.stabilizationMode = message.stabilizationMode;
    }
    if (message.geodesicMode !== false) {
      obj.geodesicMode = message.geodesicMode;
    }
    if (message.cvDumping !== false) {
      obj.cvDumping = message.cvDumping;
    }
    if (message.recognitionMode !== false) {
      obj.recognitionMode = message.recognitionMode;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JonGuiDataSystem>, I>>(base?: I): JonGuiDataSystem {
    return JonGuiDataSystem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JonGuiDataSystem>, I>>(object: I): JonGuiDataSystem {
    const message = createBaseJonGuiDataSystem();
    message.cpuTemperature = object.cpuTemperature ?? 0;
    message.gpuTemperature = object.gpuTemperature ?? 0;
    message.gpuLoad = object.gpuLoad ?? 0;
    message.cpuLoad = object.cpuLoad ?? 0;
    message.powerConsumption = object.powerConsumption ?? 0;
    message.loc = object.loc ?? 0;
    message.curVideoRecDirYear = object.curVideoRecDirYear ?? 0;
    message.curVideoRecDirMonth = object.curVideoRecDirMonth ?? 0;
    message.curVideoRecDirDay = object.curVideoRecDirDay ?? 0;
    message.curVideoRecDirHour = object.curVideoRecDirHour ?? 0;
    message.curVideoRecDirMinute = object.curVideoRecDirMinute ?? 0;
    message.curVideoRecDirSecond = object.curVideoRecDirSecond ?? 0;
    message.recEnabled = object.recEnabled ?? false;
    message.importantRecEnabled = object.importantRecEnabled ?? false;
    message.lowDiskSpace = object.lowDiskSpace ?? false;
    message.noDiskSpace = object.noDiskSpace ?? false;
    message.diskSpace = object.diskSpace ?? 0;
    message.tracking = object.tracking ?? false;
    message.vampireMode = object.vampireMode ?? false;
    message.stabilizationMode = object.stabilizationMode ?? false;
    message.geodesicMode = object.geodesicMode ?? false;
    message.cvDumping = object.cvDumping ?? false;
    message.recognitionMode = object.recognitionMode ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
