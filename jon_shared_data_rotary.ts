// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.2
// source: jon_shared_data_rotary.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  JonGuiDataRotaryMode,
  jonGuiDataRotaryModeFromJSON,
  jonGuiDataRotaryModeToJSON,
} from "./jon_shared_data_types";

export interface JonGuiDataRotary {
  azimuth: number;
  azimuthSpeed: number;
  elevation: number;
  elevationSpeed: number;
  platformAzimuth: number;
  platformElevation: number;
  platformBank: number;
  isMoving: boolean;
  mode: JonGuiDataRotaryMode;
  isScanning: boolean;
  isScanningPaused: boolean;
  useRotaryAsCompass: boolean;
  scanTarget: number;
  scanTargetMax: number;
  sunAzimuth: number;
  sunElevation: number;
  currentScanNode: ScanNode | undefined;
}

export interface ScanNode {
  index: number;
  DayZoomTableValue: number;
  HeatZoomTableValue: number;
  azimuth: number;
  elevation: number;
  linger: number;
  speed: number;
}

function createBaseJonGuiDataRotary(): JonGuiDataRotary {
  return {
    azimuth: 0,
    azimuthSpeed: 0,
    elevation: 0,
    elevationSpeed: 0,
    platformAzimuth: 0,
    platformElevation: 0,
    platformBank: 0,
    isMoving: false,
    mode: 0,
    isScanning: false,
    isScanningPaused: false,
    useRotaryAsCompass: false,
    scanTarget: 0,
    scanTargetMax: 0,
    sunAzimuth: 0,
    sunElevation: 0,
    currentScanNode: undefined,
  };
}

export const JonGuiDataRotary: MessageFns<JonGuiDataRotary> = {
  encode(message: JonGuiDataRotary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.azimuth !== 0) {
      writer.uint32(9).double(message.azimuth);
    }
    if (message.azimuthSpeed !== 0) {
      writer.uint32(17).double(message.azimuthSpeed);
    }
    if (message.elevation !== 0) {
      writer.uint32(25).double(message.elevation);
    }
    if (message.elevationSpeed !== 0) {
      writer.uint32(33).double(message.elevationSpeed);
    }
    if (message.platformAzimuth !== 0) {
      writer.uint32(41).double(message.platformAzimuth);
    }
    if (message.platformElevation !== 0) {
      writer.uint32(49).double(message.platformElevation);
    }
    if (message.platformBank !== 0) {
      writer.uint32(57).double(message.platformBank);
    }
    if (message.isMoving !== false) {
      writer.uint32(64).bool(message.isMoving);
    }
    if (message.mode !== 0) {
      writer.uint32(72).int32(message.mode);
    }
    if (message.isScanning !== false) {
      writer.uint32(80).bool(message.isScanning);
    }
    if (message.isScanningPaused !== false) {
      writer.uint32(88).bool(message.isScanningPaused);
    }
    if (message.useRotaryAsCompass !== false) {
      writer.uint32(96).bool(message.useRotaryAsCompass);
    }
    if (message.scanTarget !== 0) {
      writer.uint32(104).int32(message.scanTarget);
    }
    if (message.scanTargetMax !== 0) {
      writer.uint32(112).int32(message.scanTargetMax);
    }
    if (message.sunAzimuth !== 0) {
      writer.uint32(121).double(message.sunAzimuth);
    }
    if (message.sunElevation !== 0) {
      writer.uint32(129).double(message.sunElevation);
    }
    if (message.currentScanNode !== undefined) {
      ScanNode.encode(message.currentScanNode, writer.uint32(138).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JonGuiDataRotary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJonGuiDataRotary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.azimuth = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.azimuthSpeed = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.elevation = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.elevationSpeed = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.platformAzimuth = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 49) {
            break;
          }

          message.platformElevation = reader.double();
          continue;
        }
        case 7: {
          if (tag !== 57) {
            break;
          }

          message.platformBank = reader.double();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.isMoving = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.mode = reader.int32() as any;
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.isScanning = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.isScanningPaused = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.useRotaryAsCompass = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.scanTarget = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.scanTargetMax = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 121) {
            break;
          }

          message.sunAzimuth = reader.double();
          continue;
        }
        case 16: {
          if (tag !== 129) {
            break;
          }

          message.sunElevation = reader.double();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.currentScanNode = ScanNode.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JonGuiDataRotary {
    return {
      azimuth: isSet(object.azimuth) ? globalThis.Number(object.azimuth) : 0,
      azimuthSpeed: isSet(object.azimuthSpeed) ? globalThis.Number(object.azimuthSpeed) : 0,
      elevation: isSet(object.elevation) ? globalThis.Number(object.elevation) : 0,
      elevationSpeed: isSet(object.elevationSpeed) ? globalThis.Number(object.elevationSpeed) : 0,
      platformAzimuth: isSet(object.platformAzimuth) ? globalThis.Number(object.platformAzimuth) : 0,
      platformElevation: isSet(object.platformElevation) ? globalThis.Number(object.platformElevation) : 0,
      platformBank: isSet(object.platformBank) ? globalThis.Number(object.platformBank) : 0,
      isMoving: isSet(object.isMoving) ? globalThis.Boolean(object.isMoving) : false,
      mode: isSet(object.mode) ? jonGuiDataRotaryModeFromJSON(object.mode) : 0,
      isScanning: isSet(object.isScanning) ? globalThis.Boolean(object.isScanning) : false,
      isScanningPaused: isSet(object.isScanningPaused) ? globalThis.Boolean(object.isScanningPaused) : false,
      useRotaryAsCompass: isSet(object.useRotaryAsCompass) ? globalThis.Boolean(object.useRotaryAsCompass) : false,
      scanTarget: isSet(object.scanTarget) ? globalThis.Number(object.scanTarget) : 0,
      scanTargetMax: isSet(object.scanTargetMax) ? globalThis.Number(object.scanTargetMax) : 0,
      sunAzimuth: isSet(object.sunAzimuth) ? globalThis.Number(object.sunAzimuth) : 0,
      sunElevation: isSet(object.sunElevation) ? globalThis.Number(object.sunElevation) : 0,
      currentScanNode: isSet(object.currentScanNode) ? ScanNode.fromJSON(object.currentScanNode) : undefined,
    };
  },

  toJSON(message: JonGuiDataRotary): unknown {
    const obj: any = {};
    if (message.azimuth !== 0) {
      obj.azimuth = message.azimuth;
    }
    if (message.azimuthSpeed !== 0) {
      obj.azimuthSpeed = message.azimuthSpeed;
    }
    if (message.elevation !== 0) {
      obj.elevation = message.elevation;
    }
    if (message.elevationSpeed !== 0) {
      obj.elevationSpeed = message.elevationSpeed;
    }
    if (message.platformAzimuth !== 0) {
      obj.platformAzimuth = message.platformAzimuth;
    }
    if (message.platformElevation !== 0) {
      obj.platformElevation = message.platformElevation;
    }
    if (message.platformBank !== 0) {
      obj.platformBank = message.platformBank;
    }
    if (message.isMoving !== false) {
      obj.isMoving = message.isMoving;
    }
    if (message.mode !== 0) {
      obj.mode = jonGuiDataRotaryModeToJSON(message.mode);
    }
    if (message.isScanning !== false) {
      obj.isScanning = message.isScanning;
    }
    if (message.isScanningPaused !== false) {
      obj.isScanningPaused = message.isScanningPaused;
    }
    if (message.useRotaryAsCompass !== false) {
      obj.useRotaryAsCompass = message.useRotaryAsCompass;
    }
    if (message.scanTarget !== 0) {
      obj.scanTarget = Math.round(message.scanTarget);
    }
    if (message.scanTargetMax !== 0) {
      obj.scanTargetMax = Math.round(message.scanTargetMax);
    }
    if (message.sunAzimuth !== 0) {
      obj.sunAzimuth = message.sunAzimuth;
    }
    if (message.sunElevation !== 0) {
      obj.sunElevation = message.sunElevation;
    }
    if (message.currentScanNode !== undefined) {
      obj.currentScanNode = ScanNode.toJSON(message.currentScanNode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JonGuiDataRotary>, I>>(base?: I): JonGuiDataRotary {
    return JonGuiDataRotary.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JonGuiDataRotary>, I>>(object: I): JonGuiDataRotary {
    const message = createBaseJonGuiDataRotary();
    message.azimuth = object.azimuth ?? 0;
    message.azimuthSpeed = object.azimuthSpeed ?? 0;
    message.elevation = object.elevation ?? 0;
    message.elevationSpeed = object.elevationSpeed ?? 0;
    message.platformAzimuth = object.platformAzimuth ?? 0;
    message.platformElevation = object.platformElevation ?? 0;
    message.platformBank = object.platformBank ?? 0;
    message.isMoving = object.isMoving ?? false;
    message.mode = object.mode ?? 0;
    message.isScanning = object.isScanning ?? false;
    message.isScanningPaused = object.isScanningPaused ?? false;
    message.useRotaryAsCompass = object.useRotaryAsCompass ?? false;
    message.scanTarget = object.scanTarget ?? 0;
    message.scanTargetMax = object.scanTargetMax ?? 0;
    message.sunAzimuth = object.sunAzimuth ?? 0;
    message.sunElevation = object.sunElevation ?? 0;
    message.currentScanNode = (object.currentScanNode !== undefined && object.currentScanNode !== null)
      ? ScanNode.fromPartial(object.currentScanNode)
      : undefined;
    return message;
  },
};

function createBaseScanNode(): ScanNode {
  return { index: 0, DayZoomTableValue: 0, HeatZoomTableValue: 0, azimuth: 0, elevation: 0, linger: 0, speed: 0 };
}

export const ScanNode: MessageFns<ScanNode> = {
  encode(message: ScanNode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== 0) {
      writer.uint32(8).int32(message.index);
    }
    if (message.DayZoomTableValue !== 0) {
      writer.uint32(16).int32(message.DayZoomTableValue);
    }
    if (message.HeatZoomTableValue !== 0) {
      writer.uint32(24).int32(message.HeatZoomTableValue);
    }
    if (message.azimuth !== 0) {
      writer.uint32(33).double(message.azimuth);
    }
    if (message.elevation !== 0) {
      writer.uint32(41).double(message.elevation);
    }
    if (message.linger !== 0) {
      writer.uint32(49).double(message.linger);
    }
    if (message.speed !== 0) {
      writer.uint32(57).double(message.speed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScanNode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScanNode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.index = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.DayZoomTableValue = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.HeatZoomTableValue = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.azimuth = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.elevation = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 49) {
            break;
          }

          message.linger = reader.double();
          continue;
        }
        case 7: {
          if (tag !== 57) {
            break;
          }

          message.speed = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScanNode {
    return {
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      DayZoomTableValue: isSet(object.DayZoomTableValue) ? globalThis.Number(object.DayZoomTableValue) : 0,
      HeatZoomTableValue: isSet(object.HeatZoomTableValue) ? globalThis.Number(object.HeatZoomTableValue) : 0,
      azimuth: isSet(object.azimuth) ? globalThis.Number(object.azimuth) : 0,
      elevation: isSet(object.elevation) ? globalThis.Number(object.elevation) : 0,
      linger: isSet(object.linger) ? globalThis.Number(object.linger) : 0,
      speed: isSet(object.speed) ? globalThis.Number(object.speed) : 0,
    };
  },

  toJSON(message: ScanNode): unknown {
    const obj: any = {};
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.DayZoomTableValue !== 0) {
      obj.DayZoomTableValue = Math.round(message.DayZoomTableValue);
    }
    if (message.HeatZoomTableValue !== 0) {
      obj.HeatZoomTableValue = Math.round(message.HeatZoomTableValue);
    }
    if (message.azimuth !== 0) {
      obj.azimuth = message.azimuth;
    }
    if (message.elevation !== 0) {
      obj.elevation = message.elevation;
    }
    if (message.linger !== 0) {
      obj.linger = message.linger;
    }
    if (message.speed !== 0) {
      obj.speed = message.speed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ScanNode>, I>>(base?: I): ScanNode {
    return ScanNode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ScanNode>, I>>(object: I): ScanNode {
    const message = createBaseScanNode();
    message.index = object.index ?? 0;
    message.DayZoomTableValue = object.DayZoomTableValue ?? 0;
    message.HeatZoomTableValue = object.HeatZoomTableValue ?? 0;
    message.azimuth = object.azimuth ?? 0;
    message.elevation = object.elevation ?? 0;
    message.linger = object.linger ?? 0;
    message.speed = object.speed ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
