// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.2
// source: jon_shared_data_rec_osd.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  JonGuiDataRecOsdScreen,
  jonGuiDataRecOsdScreenFromJSON,
  jonGuiDataRecOsdScreenToJSON,
} from "./jon_shared_data_types";

export interface JonGuiDataRecOsd {
  screen: JonGuiDataRecOsdScreen;
  heatOsdEnabled: boolean;
  dayOsdEnabled: boolean;
  heatCrosshairOffsetHorizontal: number;
  heatCrosshairOffsetVertical: number;
  dayCrosshairOffsetHorizontal: number;
  dayCrosshairOffsetVertical: number;
}

function createBaseJonGuiDataRecOsd(): JonGuiDataRecOsd {
  return {
    screen: 0,
    heatOsdEnabled: false,
    dayOsdEnabled: false,
    heatCrosshairOffsetHorizontal: 0,
    heatCrosshairOffsetVertical: 0,
    dayCrosshairOffsetHorizontal: 0,
    dayCrosshairOffsetVertical: 0,
  };
}

export const JonGuiDataRecOsd: MessageFns<JonGuiDataRecOsd> = {
  encode(message: JonGuiDataRecOsd, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.screen !== 0) {
      writer.uint32(8).int32(message.screen);
    }
    if (message.heatOsdEnabled !== false) {
      writer.uint32(16).bool(message.heatOsdEnabled);
    }
    if (message.dayOsdEnabled !== false) {
      writer.uint32(24).bool(message.dayOsdEnabled);
    }
    if (message.heatCrosshairOffsetHorizontal !== 0) {
      writer.uint32(32).int32(message.heatCrosshairOffsetHorizontal);
    }
    if (message.heatCrosshairOffsetVertical !== 0) {
      writer.uint32(40).int32(message.heatCrosshairOffsetVertical);
    }
    if (message.dayCrosshairOffsetHorizontal !== 0) {
      writer.uint32(48).int32(message.dayCrosshairOffsetHorizontal);
    }
    if (message.dayCrosshairOffsetVertical !== 0) {
      writer.uint32(56).int32(message.dayCrosshairOffsetVertical);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JonGuiDataRecOsd {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJonGuiDataRecOsd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.screen = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.heatOsdEnabled = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.dayOsdEnabled = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.heatCrosshairOffsetHorizontal = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.heatCrosshairOffsetVertical = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.dayCrosshairOffsetHorizontal = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.dayCrosshairOffsetVertical = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JonGuiDataRecOsd {
    return {
      screen: isSet(object.screen) ? jonGuiDataRecOsdScreenFromJSON(object.screen) : 0,
      heatOsdEnabled: isSet(object.heatOsdEnabled) ? globalThis.Boolean(object.heatOsdEnabled) : false,
      dayOsdEnabled: isSet(object.dayOsdEnabled) ? globalThis.Boolean(object.dayOsdEnabled) : false,
      heatCrosshairOffsetHorizontal: isSet(object.heatCrosshairOffsetHorizontal)
        ? globalThis.Number(object.heatCrosshairOffsetHorizontal)
        : 0,
      heatCrosshairOffsetVertical: isSet(object.heatCrosshairOffsetVertical)
        ? globalThis.Number(object.heatCrosshairOffsetVertical)
        : 0,
      dayCrosshairOffsetHorizontal: isSet(object.dayCrosshairOffsetHorizontal)
        ? globalThis.Number(object.dayCrosshairOffsetHorizontal)
        : 0,
      dayCrosshairOffsetVertical: isSet(object.dayCrosshairOffsetVertical)
        ? globalThis.Number(object.dayCrosshairOffsetVertical)
        : 0,
    };
  },

  toJSON(message: JonGuiDataRecOsd): unknown {
    const obj: any = {};
    if (message.screen !== 0) {
      obj.screen = jonGuiDataRecOsdScreenToJSON(message.screen);
    }
    if (message.heatOsdEnabled !== false) {
      obj.heatOsdEnabled = message.heatOsdEnabled;
    }
    if (message.dayOsdEnabled !== false) {
      obj.dayOsdEnabled = message.dayOsdEnabled;
    }
    if (message.heatCrosshairOffsetHorizontal !== 0) {
      obj.heatCrosshairOffsetHorizontal = Math.round(message.heatCrosshairOffsetHorizontal);
    }
    if (message.heatCrosshairOffsetVertical !== 0) {
      obj.heatCrosshairOffsetVertical = Math.round(message.heatCrosshairOffsetVertical);
    }
    if (message.dayCrosshairOffsetHorizontal !== 0) {
      obj.dayCrosshairOffsetHorizontal = Math.round(message.dayCrosshairOffsetHorizontal);
    }
    if (message.dayCrosshairOffsetVertical !== 0) {
      obj.dayCrosshairOffsetVertical = Math.round(message.dayCrosshairOffsetVertical);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JonGuiDataRecOsd>, I>>(base?: I): JonGuiDataRecOsd {
    return JonGuiDataRecOsd.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JonGuiDataRecOsd>, I>>(object: I): JonGuiDataRecOsd {
    const message = createBaseJonGuiDataRecOsd();
    message.screen = object.screen ?? 0;
    message.heatOsdEnabled = object.heatOsdEnabled ?? false;
    message.dayOsdEnabled = object.dayOsdEnabled ?? false;
    message.heatCrosshairOffsetHorizontal = object.heatCrosshairOffsetHorizontal ?? 0;
    message.heatCrosshairOffsetVertical = object.heatCrosshairOffsetVertical ?? 0;
    message.dayCrosshairOffsetHorizontal = object.dayCrosshairOffsetHorizontal ?? 0;
    message.dayCrosshairOffsetVertical = object.dayCrosshairOffsetVertical ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
