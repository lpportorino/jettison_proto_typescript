// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.2
// source: jon_shared_data_actual_space_time.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export interface JonGuiDataActualSpaceTime {
  azimuth: number;
  elevation: number;
  bank: number;
  latitude: number;
  longitude: number;
  altitude: number;
  timestamp: Long;
}

function createBaseJonGuiDataActualSpaceTime(): JonGuiDataActualSpaceTime {
  return { azimuth: 0, elevation: 0, bank: 0, latitude: 0, longitude: 0, altitude: 0, timestamp: Long.ZERO };
}

export const JonGuiDataActualSpaceTime: MessageFns<JonGuiDataActualSpaceTime> = {
  encode(message: JonGuiDataActualSpaceTime, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.azimuth !== 0) {
      writer.uint32(9).double(message.azimuth);
    }
    if (message.elevation !== 0) {
      writer.uint32(17).double(message.elevation);
    }
    if (message.bank !== 0) {
      writer.uint32(25).double(message.bank);
    }
    if (message.latitude !== 0) {
      writer.uint32(33).double(message.latitude);
    }
    if (message.longitude !== 0) {
      writer.uint32(41).double(message.longitude);
    }
    if (message.altitude !== 0) {
      writer.uint32(49).double(message.altitude);
    }
    if (!message.timestamp.equals(Long.ZERO)) {
      writer.uint32(56).int64(message.timestamp.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JonGuiDataActualSpaceTime {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJonGuiDataActualSpaceTime();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.azimuth = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.elevation = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.bank = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.latitude = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.longitude = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 49) {
            break;
          }

          message.altitude = reader.double();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.timestamp = Long.fromString(reader.int64().toString());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JonGuiDataActualSpaceTime {
    return {
      azimuth: isSet(object.azimuth) ? globalThis.Number(object.azimuth) : 0,
      elevation: isSet(object.elevation) ? globalThis.Number(object.elevation) : 0,
      bank: isSet(object.bank) ? globalThis.Number(object.bank) : 0,
      latitude: isSet(object.latitude) ? globalThis.Number(object.latitude) : 0,
      longitude: isSet(object.longitude) ? globalThis.Number(object.longitude) : 0,
      altitude: isSet(object.altitude) ? globalThis.Number(object.altitude) : 0,
      timestamp: isSet(object.timestamp) ? Long.fromValue(object.timestamp) : Long.ZERO,
    };
  },

  toJSON(message: JonGuiDataActualSpaceTime): unknown {
    const obj: any = {};
    if (message.azimuth !== 0) {
      obj.azimuth = message.azimuth;
    }
    if (message.elevation !== 0) {
      obj.elevation = message.elevation;
    }
    if (message.bank !== 0) {
      obj.bank = message.bank;
    }
    if (message.latitude !== 0) {
      obj.latitude = message.latitude;
    }
    if (message.longitude !== 0) {
      obj.longitude = message.longitude;
    }
    if (message.altitude !== 0) {
      obj.altitude = message.altitude;
    }
    if (!message.timestamp.equals(Long.ZERO)) {
      obj.timestamp = (message.timestamp || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JonGuiDataActualSpaceTime>, I>>(base?: I): JonGuiDataActualSpaceTime {
    return JonGuiDataActualSpaceTime.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JonGuiDataActualSpaceTime>, I>>(object: I): JonGuiDataActualSpaceTime {
    const message = createBaseJonGuiDataActualSpaceTime();
    message.azimuth = object.azimuth ?? 0;
    message.elevation = object.elevation ?? 0;
    message.bank = object.bank ?? 0;
    message.latitude = object.latitude ?? 0;
    message.longitude = object.longitude ?? 0;
    message.altitude = object.altitude ?? 0;
    message.timestamp = (object.timestamp !== undefined && object.timestamp !== null)
      ? Long.fromValue(object.timestamp)
      : Long.ZERO;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
